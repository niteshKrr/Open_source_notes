{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to My Open Source Notes","text":"GolangBash <pre><code>package main\n\nimport \"fmt\";\n\nfunc main() {\n    fmt.Println(\"Hello world!\")\n}\n</code></pre> <pre><code>#!/bin/bash\n\necho \"Hello world!\"\n</code></pre> <p>\ud83d\udd25 \ud83d\ude80</p>"},{"location":"docker/","title":"Welcome to Docker","text":"<p>Docker is an open-source containerization platform by which you can pack your application and all its dependencies into a standardized unit called a container. Containers are light in weight which makes them portable and they are isolated from the underlying infrastructure and from each other container. You can run the docker image as a docker container in any machine where docker is installed without depending on the operating system.</p> <p></p>"},{"location":"kubernetes/","title":"Welcome to Kubernetes","text":"<p>Kubernetes is an open source container orchestration platform that automates many of the manual processes involved in deploying, managing, and scaling containerized applications.</p> <p>Kubernetes automates the configuration of your applications and maintains and tracks resource allocation. A project of the  Cloud Native Computing Foundation (CNCF), Kubernetes was first introduced in 2014 and has become a widely adopted platform for organizations to run distributed applications and services at scale.</p> <p></p>"},{"location":"kubernetes/architecture/","title":"Kubernetes Architecture","text":"<p>Kubernetes follows a client-server architecture. It\u2019s possible to have a multi-master setup (for high availability), but by default there is a single master server which acts as a controlling node. A master and its controlled nodes(worker nodes) constitute a \u201cKubernetes cluster\u201d.</p> <p></p>"},{"location":"kubernetes/architecture/#master-node-control-plane-components","title":"Master Node (Control Plane) Components","text":""},{"location":"kubernetes/architecture/#api-server","title":"API Server","text":"<p>The API server is the entry point for all the REST commands used to control the cluster. All the administrative tasks are done by the API server within the master node.API server validates and configures the API objects such as ports, services, replication, controllers, and deployments and it is responsible for exposing APIs for every operation. We can interact with these APIs using a tool called kubectl.It is a command-line interface for running commands against Kubernetes clusters.</p>"},{"location":"kubernetes/architecture/#etcd","title":"Etcd","text":"<p>It is a distributed key-value lightweight database. In Kubernetes, it is a central database for storing the current cluster state at any point in time and is also used to store the configuration details such as subnets, config maps, etc. It is written in the Go programming language.</p>"},{"location":"kubernetes/architecture/#scheduler","title":"Scheduler","text":"<p>It is responsible for tracking the utilization of the working load of each worker node and then placing the workload on which resources are available and can accept the workload.The scheduler is responsible for workload utilization and allocating the pod to the new node.</p>"},{"location":"kubernetes/architecture/#controller-manager","title":"Controller Manager","text":"<p>Also known as controllers. It is a daemon that runs in a non terminating loop and is responsible for collecting and sending information to the API server.Basically, the controller watches the desired state of the cluster if the current state of the cluster does not meet the desired state then the control loop takes the corrective steps to make sure that the current state is the same as that of the desired state.So in this way controllers are responsible for the overall health of the entire cluster by ensuring that nodes are up and running all the time and correct pods are running as mentioned in the specs file. </p>"},{"location":"kubernetes/architecture/#cloud-controller-manager","title":"Cloud Controller Manager","text":"<p>The Cloud Controller Manager (CCM) is a Kubernetes component that helps Kubernetes work with cloud providers like AWS, Azure, or Google Cloud.</p> <p>It acts as a bridge between Kubernetes and the cloud provider, managing cloud-specific tasks such as: \u2705 Creating Load Balancers for Services \u2705 Attaching Cloud Storage (Persistent Volumes) \u2705 Managing Cloud-based Nodes (Adding or removing virtual machines) \u2705 Ensuring Networking Works with the Cloud Provider</p>"},{"location":"kubernetes/architecture/#worker-node-components","title":"Worker Node Components","text":""},{"location":"kubernetes/architecture/#kubelet","title":"kubelet","text":"<p>This is the \"manager\" for each worker node. It ensures all containers on the node are healthy and running as they should be.If kubelet notices any issues with the pods running on the worker nodes then it tries to restart the pod on the same node. If the issue is with the worker node itself then the Kubernetes master node detects the node failure and decides to recreate the pods on the other healthy node.</p>"},{"location":"kubernetes/architecture/#kube-proxy","title":"kube-proxy","text":"<p>It is responsible for maintaining the entire network configuration. Kube-Proxy maintains the distributed network across all the nodes, pods, and containers and exposes the services across the outside world.It acts as a network proxy and load balancer for a service on a single worker node and manages the network routing for TCP and UDP packets.</p>"},{"location":"kubernetes/architecture/#pod","title":"Pod","text":"<p>The smallest unit in Kubernetes, a Pod is a group of one or more containers.With the help of pods, we can deploy multiple dependent containers together so it acts as a wrapper around these containers so we can interact and manage these containers primarily through pods. </p>"},{"location":"kubernetes/architecture/#container-runtime-interface","title":"Container Runtime Interface","text":"<p>The Container Runtime Interface (CRI) is an API specification that allows Kubernetes to communicate with container runtimes (like containerd or CRI-O). It acts as a middle layer between Kubernetes and the software responsible for running containers.</p>"},{"location":"kubernetes/architecture/#other-components","title":"Other Components \ud83d\ude2e","text":""},{"location":"kubernetes/architecture/#namespace","title":"Namespace","text":"<p>A namespace in Kubernetes is like a separate workspace inside a cluster. It helps organize and manage multiple applications by keeping their resources isolated from each other.</p> <p>\u2705 Organizes Resources \u2013 Helps group related Pods, Services, and other Kubernetes objects. \u2705 Avoids Conflicts \u2013 Prevents different teams or projects from interfering with each other. \u2705 Controls Access \u2013 Allows setting different permissions for different namespaces. \u2705 Better Resource Management \u2013 Limits CPU &amp; memory usage per namespace.</p>"},{"location":"kubernetes/architecture/#deployment","title":"Deployment","text":"<p>A Deployment in Kubernetes is like a controller that manages and updates your application automatically. It ensures your application runs as expected, even if something goes wrong.</p> <p>\u2705 Ensures High Availability \u2013 Keeps the correct number of app instances running. \u2705 Easy Updates \u2013 Supports rolling updates without downtime. \u2705 Self-Healing \u2013 Automatically restarts failed Pods. \u2705 Scalability \u2013 Allows you to scale up/down easily.</p>"},{"location":"kubernetes/architecture/#service","title":"Service","text":"<p>A Service in Kubernetes is like a stable network address for your Pods. It allows communication between different parts of your application, even if individual Pods are replaced or restarted.</p> <p>\u2705 Pods are temporary \u2013 If a Pod crashes, Kubernetes replaces it with a new one that has a different IP. \u2705 A Service provides a fixed IP and DNS name \u2013 So other components can always reach it. \u2705 Load Balancing \u2013 Distributes traffic among multiple Pods. \u2705 Enables External Access \u2013 Services can expose your app to the internet.</p>"},{"location":"kubernetes/architecture/#ingress","title":"Ingress","text":"<p>Ingress is like a smart entry gate for your Kubernetes cluster. It routes external HTTP/HTTPS traffic to the correct Service inside the cluster.</p> <p>\u2705 Single Entry Point \u2013 Instead of exposing multiple Services, use one entry point. \u2705 Domain-Based Routing \u2013 Send traffic to different apps based on URL (e.g., app.com/api vs. app.com/web). \u2705 Path-Based Routing \u2013 Route traffic to different services (e.g., /shop \u2192 Shop Service, /blog \u2192 Blog Service). \u2705 TLS/SSL Support \u2013 Secure traffic using HTTPS. \u2705 Load Balancing \u2013 Distribute traffic efficiently across multiple Pods.</p>"},{"location":"kubernetes/workflow/","title":"Kubernetes Deployment Workflow \ud83d\udd25","text":""},{"location":"kubernetes/workflow/#1-create-a-namespace-optional-but-recommended","title":"1\ufe0f\u20e3 Create a Namespace (Optional but Recommended)","text":"<p>Namespaces help organize resources within the cluster. <pre><code>kubectl create namespace my-namespace\n</code></pre></p>"},{"location":"kubernetes/workflow/#2-create-a-deployment-manages-pods-ensures-availability","title":"2\ufe0f\u20e3 Create a Deployment (Manages Pods &amp; Ensures Availability)","text":"<p>A Deployment ensures that the required number of Pods are running.</p>"},{"location":"kubernetes/workflow/#deployment-yaml-nginx-exampleyaml","title":"Deployment YAML (nginx-example.yaml)","text":"<pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\n  namespace: my-namespace\nspec:\n  replicas: 2  # Number of Pods\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n        - name: nginx\n          image: nginx:latest\n          ports:\n            - containerPort: 80\n</code></pre> <p>Apply the Deployment</p> <pre><code>kubectl apply -f nginx-example.yaml\n</code></pre>"},{"location":"kubernetes/workflow/#3-verify-deployment-pods","title":"3\ufe0f\u20e3 Verify Deployment &amp; Pods","text":"<pre><code>kubectl get deployments -n my-namespace\nkubectl get pods -n my-namespace\n</code></pre>"},{"location":"kubernetes/workflow/#4-create-a-service-to-expose-deployment-internally-or-externally","title":"4\ufe0f\u20e3 Create a Service (To Expose Deployment Internally or Externally)","text":"<p>A Service allows communication with the application running inside the Pods.</p>"},{"location":"kubernetes/workflow/#service-yaml-nginx-serviceyaml","title":"Service YAML (nginx-service.yaml)","text":"<pre><code>apiVersion: v1\nkind: Service\nmetadata:\n  name: nginx-service\n  namespace: my-namespace\nspec:\n  selector:\n    app: nginx\n  ports:\n    - protocol: TCP\n      port: 80\n      targetPort: 80\n  type: ClusterIP  # Change to NodePort or LoadBalancer if external access is needed\n</code></pre> <p>Apply the Service</p> <pre><code>kubectl apply -f nginx-service.yaml\n</code></pre>"},{"location":"kubernetes/workflow/#5-verify-the-service","title":"5\ufe0f\u20e3 Verify the Service","text":"<pre><code>kubectl get services -n my-namespace\n</code></pre>"},{"location":"kubernetes/workflow/#6-optional-expose-the-application-externally","title":"6\ufe0f\u20e3 (Optional) Expose the Application Externally","text":""},{"location":"kubernetes/workflow/#option-1-use-nodeport-exposes-service-on-a-static-node-port","title":"Option 1: Use NodePort (Exposes Service on a Static Node Port)","text":"<p>Modify the <code>type</code> in the Service YAML: <pre><code>  type: NodePort\n</code></pre> Apply changes <pre><code>kubectl apply -f nginx-service.yaml\nkubectl get services -n my-namespace\n</code></pre></p> <p>Check external access <pre><code>minikube service nginx-service -n my-namespace\n</code></pre></p>"},{"location":"kubernetes/workflow/#option-2-use-ingress-advanced-routing-https-support","title":"Option 2: Use Ingress (Advanced Routing &amp; HTTPS Support)","text":"<p>Create an Ingress resource for domain-based routing.</p>"},{"location":"kubernetes/workflow/#ingress-yaml-nginx-ingressyaml","title":"Ingress YAML (nginx-ingress.yaml)","text":"<pre><code>apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: nginx-ingress\n  namespace: my-namespace\nspec:\n  rules:\n    - host: myapp.local  # Change this to your domain\n      http:\n        paths:\n          - path: /\n            pathType: Prefix\n            backend:\n              service:\n                name: nginx-service\n                port:\n                  number: 80\n</code></pre> <p>Apply the Ingress <pre><code>kubectl apply -f nginx-ingress.yaml\n</code></pre></p> <p>Check the Ingress <pre><code>kubectl get ingress -n my-namespace\n</code></pre></p>"},{"location":"kubernetes/workflow/#7-scaling-updating-the-deployment","title":"7\ufe0f\u20e3 Scaling &amp; Updating the Deployment","text":""},{"location":"kubernetes/workflow/#scale-up-or-down","title":"Scale Up or Down","text":"<pre><code>kubectl scale deployment nginx-deployment --replicas=4 -n my-namespace\n</code></pre>"},{"location":"kubernetes/workflow/#rolling-update-update-image-version","title":"Rolling Update (Update Image Version)","text":"<pre><code>kubectl set image deployment/nginx-deployment nginx=nginx:1.21 -n my-namespace\n</code></pre>"},{"location":"kubernetes/workflow/#8-deleting-resources-cleanup","title":"8\ufe0f\u20e3 Deleting Resources (Cleanup)","text":"<pre><code>kubectl delete namespace my-namespace\n</code></pre>"},{"location":"linux/","title":"Welcome to Linux","text":"<p>Linux is a free, open-source operating system (OS) that is based on the Unix family. Unlike Windows or macOS, which are owned and controlled by a specific person, company, or organization, Linux is developed and maintained by a global community of developers. The Linux kernel, originally created by Linus Torvalds in 1991, serves as the core of the OS, managing hardware and system resources.</p> <p></p>"},{"location":"linux/bash_or_shell_scripting/","title":"Shell/Bash Scripting","text":"<p>Shell scripting (or Bash scripting) is a way to automate tasks in a Unix-like operating system by writing a series of commands in a script file. These scripts are executed by a command-line interpreter, such as Bash (Bourne Again Shell), Zsh.</p> <p></p>"},{"location":"linux/bash_or_shell_scripting/#contents","title":"Contents","text":""},{"location":"linux/bash_or_shell_scripting/debugging_shell_script/","title":"Debugging Shell Scripts","text":""},{"location":"linux/bash_or_shell_scripting/debugging_shell_script/#1-using-x-option-execution-trace","title":"1. Using <code>-x</code> Option (Execution Trace)","text":"<p>The <code>-x</code> option prints each command before execution, helping trace issues.</p>"},{"location":"linux/bash_or_shell_scripting/debugging_shell_script/#enable-debugging","title":"Enable Debugging","text":"<pre><code>#!/bin/bash\nset -x  # Enable debugging\n\necho \"Hello, World!\"\nls /nonexistent_directory  # This will cause an error\nset +x  # Disable debugging\n</code></pre>"},{"location":"linux/bash_or_shell_scripting/debugging_shell_script/#run-the-script","title":"Run the script:","text":"<pre><code>bash -x script.sh\n</code></pre>"},{"location":"linux/bash_or_shell_scripting/debugging_shell_script/#2-using-v-option-verbose-mode","title":"2. Using <code>-v</code> Option (Verbose Mode)","text":"<p>The <code>-v</code> option prints each command before execution, but without expansion.</p>"},{"location":"linux/bash_or_shell_scripting/debugging_shell_script/#enable-verbose-mode","title":"Enable Verbose Mode","text":"<pre><code>#!/bin/bash\nset -v  # Enable verbose mode\n\necho \"Running script...\"\ndate\nset +v  # Disable verbose mode\n</code></pre>"},{"location":"linux/bash_or_shell_scripting/debugging_shell_script/#run-the-script_1","title":"Run the script:","text":"<pre><code>bash -v script.sh\n</code></pre>"},{"location":"linux/bash_or_shell_scripting/debugging_shell_script/#3-using-set-e-exit-on-error","title":"3. Using <code>set -e</code> (Exit on Error)","text":"<p>The <code>set -e</code> command forces the script to exit immediately if any command fails.</p>"},{"location":"linux/bash_or_shell_scripting/debugging_shell_script/#example","title":"Example:","text":"<pre><code>#!/bin/bash\nset -e  # Exit script if any command fails\n\necho \"Starting...\"\nls /nonexistent_directory  # Script will exit here\n\necho \"This won't execute\"\n</code></pre>"},{"location":"linux/bash_or_shell_scripting/debugging_shell_script/#4-using-trap-for-error-handling","title":"4. Using <code>trap</code> for Error Handling","text":"<p><code>trap</code> allows running a custom command when the script encounters an error.</p>"},{"location":"linux/bash_or_shell_scripting/debugging_shell_script/#example_1","title":"Example:","text":"<pre><code>#!/bin/bash\ntrap 'echo \"Error on line $LINENO\"' ERR\n\nls /nonexistent_directory  # Error occurs here\necho \"This message might not be printed.\"\n</code></pre>"},{"location":"linux/bash_or_shell_scripting/debugging_shell_script/#5-checking-exit-status","title":"5. Checking Exit Status (<code>$?</code>)","text":"<p>Every command returns an exit status. <code>0</code> means success, any other number means failure.</p>"},{"location":"linux/bash_or_shell_scripting/debugging_shell_script/#example_2","title":"Example:","text":"<pre><code>#!/bin/bash\necho \"Checking command status...\"\nls /nonexistent_directory\n\nif [[ $? -ne 0 ]]; then\n    echo \"Command failed!\"\nfi\n</code></pre>"},{"location":"linux/bash_or_shell_scripting/debugging_shell_script/#summary","title":"Summary","text":"<p>\u2705 <code>-x</code> \u2013 Execution tracing \u2705 <code>-v</code> \u2013 Verbose mode \u2705 <code>set -e</code> \u2013 Exit on error \u2705 <code>trap</code> \u2013 Custom error handling \u2705 <code>$?</code> \u2013 Exit status check  </p>"},{"location":"linux/bash_or_shell_scripting/imp_to_know/","title":"Important To Know","text":""},{"location":"linux/bash_or_shell_scripting/imp_to_know/#difference-between-and-in-bash","title":"Difference Between <code>$*</code> and <code>$#</code> in Bash","text":"Feature <code>$*</code> <code>$#</code> Expands to All arguments as a single string Total count of arguments Behavior when quoted (<code>\"$*\"</code>) Treats all arguments as one string (<code>\"arg1 arg2 arg3\"</code>) N/A Example Output <code>\"arg1 arg2 arg3\"</code> <code>3</code> <p>\ud83d\udccc Use <code>$#</code> when you need to check how many arguments were passed.  </p>"},{"location":"linux/bash_or_shell_scripting/imp_to_know/#difference-between-and-in-bash_1","title":"Difference Between <code>$*</code> and <code>$@</code> in Bash","text":"Feature <code>$*</code> <code>$@</code> Expands to All arguments as a single string when quoted (<code>\"$*\"</code>) Each argument as separate strings when quoted (<code>\"$@\"</code>) Behavior when unquoted Expands arguments like <code>$1 $2 $3 ...</code> Expands arguments like <code>$1 $2 $3 ...</code> Behavior when quoted (<code>\"$*\"</code>) Treats all arguments as one string (<code>\"arg1 arg2 arg3\"</code>) Treats each argument as separate strings (<code>\"arg1\" \"arg2\" \"arg3\"</code>) Use Case Rarely used, can cause issues with argument separation Preferred for iterating over arguments while maintaining individual argument boundaries <p>\ud83d\udccc Use <code>$@</code> in loops instead of <code>$*</code> to preserve argument separation.</p>"},{"location":"linux/bash_or_shell_scripting/imp_to_know/#code-examples","title":"Code Examples","text":""},{"location":"linux/bash_or_shell_scripting/imp_to_know/#using","title":"Using <code>$*</code>","text":"<p><pre><code>#!/bin/bash\necho \"Using \\$*\"\nfor arg in \"$*\"; do\n    echo \"Arg: $arg\"\ndone\n</code></pre> Output: <pre><code>Arg: arg1 arg2 arg3\n</code></pre></p>"},{"location":"linux/bash_or_shell_scripting/imp_to_know/#using_1","title":"Using <code>$@</code>","text":"<p><pre><code>#!/bin/bash\necho \"Using \\$@\"\nfor arg in \"$@\"; do\n    echo \"Arg: $arg\"\ndone\n</code></pre> Output: <pre><code>Arg: arg1\nArg: arg2\nArg: arg3\n</code></pre></p> <p>\ud83d\udd39 Notice how <code>$*</code> treats all arguments as one, whereas <code>$@</code> preserves argument separation.</p>"},{"location":"linux/bash_or_shell_scripting/introduction/","title":"Introduction to Bash Scriptiong","text":""},{"location":"linux/bash_or_shell_scripting/introduction/#shebang","title":"Shebang (<code>#!</code>)","text":"<p>A shebang (<code>#!</code>) is the first line in a script that tells the operating system which interpreter to use to execute the script.</p>"},{"location":"linux/bash_or_shell_scripting/introduction/#syntax","title":"Syntax","text":"<p><pre><code>#!/path/to/interpreter\n</code></pre> - The <code>#</code> symbol starts a comment, but when combined with <code>!</code>, it signals the system to use a specific shell or interpreter. - The path after <code>#!</code> should point to the executable of the interpreter.</p>"},{"location":"linux/bash_or_shell_scripting/introduction/#common-shebangs","title":"Common Shebangs","text":"Shebang Interpreter <code>#!/bin/bash</code> Bash shell <code>#!/bin/sh</code> Bourne shell (generic shell) <code>#!/usr/bin/python3</code> Python 3 interpreter <code>#!/usr/bin/perl</code> Perl interpreter"},{"location":"linux/bash_or_shell_scripting/introduction/#examples","title":"Examples","text":"<pre><code>#!/bin/bash\necho \"This script runs using Bash!\"\n</code></pre>"},{"location":"linux/bash_or_shell_scripting/essential_construct/_%24%3F_and_test%20command/","title":"Test command and $?","text":""},{"location":"linux/bash_or_shell_scripting/essential_construct/_%24%3F_and_test%20command/#1-the-test-command-in-bash","title":"1. The <code>test</code> Command in Bash","text":"<p>The <code>test</code> command is used for evaluating conditions, such as checking file types, comparing values, and testing expressions.</p>"},{"location":"linux/bash_or_shell_scripting/essential_construct/_%24%3F_and_test%20command/#usage-of-test-command","title":"Usage of <code>test</code> Command","text":"<p>It can be used in three ways :-</p> <ol> <li>Using <code>test</code> keyword: <pre><code>test condition\n</code></pre></li> <li>Using <code>[ ]</code> (Square Brackets) - Equivalent to <code>test</code>: <pre><code>[ condition ]\n</code></pre></li> <li>Using <code>[[ ]]</code> (Double Brackets) - Advanced version: <pre><code>[[ condition ]]\n</code></pre></li> </ol> why we should use (Double Brackets) <code>[[ condition ]]</code> not (Square Brackets) <code>[ condition ]</code> <pre><code>#! /bin/bash\n\nname1=\"lo ki\"\nname2=\"lo ki\"\nif [ ${name1} == ${name2} ]\nthen\n    echo \"both strings are equal\"\nfi\n</code></pre> <p>the above script gives you error like <code>too many arguments</code> after running.</p> <pre><code>#! /bin/bash\n\nname1=\"lo ki\"\nname2=\"lo ki\"\nif [[ ${name1} == ${name2} ]]\nthen\n    echo \"both strings are equal\"\nfi\n</code></pre> <p>but the same code does not gives you error if you use (Double Brackets) <code>[[ condition ]]</code></p>"},{"location":"linux/bash_or_shell_scripting/essential_construct/_%24%3F_and_test%20command/#examples","title":"Examples","text":""},{"location":"linux/bash_or_shell_scripting/essential_construct/_%24%3F_and_test%20command/#testing-numbers","title":"Testing Numbers","text":"<pre><code>#!/bin/bash\na=10\nb=20\n\nif [[ ${a} -lt ${b} ]]; then\n    echo \"${a} is less than ${b}\"\nfi\n</code></pre>"},{"location":"linux/bash_or_shell_scripting/essential_construct/_%24%3F_and_test%20command/#numeric-comparison-operators","title":"Numeric Comparison Operators","text":"Operator Description <code>-eq</code> Equal to <code>-ne</code> Not equal to <code>-gt</code> Greater than <code>-lt</code> Less than <code>-ge</code> Greater than or equal to <code>-le</code> Less than or equal to"},{"location":"linux/bash_or_shell_scripting/essential_construct/_%24%3F_and_test%20command/#testing-strings","title":"Testing Strings","text":"<pre><code>#!/bin/bash\nstr1=\"hello\"\nstr2=\"world\"\n\nif [[ \"${str1}\" = \"${str2}\" ]]; then\n    echo \"Strings are equal\"\nelse\n    echo \"Strings are not equal\"\nfi\n</code></pre>"},{"location":"linux/bash_or_shell_scripting/essential_construct/_%24%3F_and_test%20command/#string-comparison-operators","title":"String Comparison Operators","text":"Operator Description <code>=</code> Strings are equal <code>!=</code> Strings are not equal <code>-z</code> String is empty <code>-n</code> String is not empty"},{"location":"linux/bash_or_shell_scripting/essential_construct/_%24%3F_and_test%20command/#testing-file-conditions","title":"Testing File Conditions","text":"<pre><code>#!/bin/bash\nfile=\"testfile.txt\"\n\nif [[ -f \"${file}\" ]]; then\n    echo \"${file} exists\"\nelse\n    echo \"${file} does not exist\"\nfi\n</code></pre>"},{"location":"linux/bash_or_shell_scripting/essential_construct/_%24%3F_and_test%20command/#file-test-operators","title":"File Test Operators","text":"Operator Description <code>-f</code> File exists and is a regular file <code>-d</code> File is a directory <code>-e</code> File exists <code>-r</code> File is readable <code>-w</code> File is writable <code>-x</code> File is executable <code>-s</code> File exists and is not empty"},{"location":"linux/bash_or_shell_scripting/essential_construct/_%24%3F_and_test%20command/#2-the-variable-in-bash","title":"2. The <code>$?</code> Variable in Bash","text":"<p>The <code>$?</code> variable holds the exit status of the last executed command.</p>"},{"location":"linux/bash_or_shell_scripting/essential_construct/_%24%3F_and_test%20command/#exit-status-meaning","title":"Exit Status Meaning","text":"<ul> <li><code>0</code> \u2192 Command executed successfully (true)</li> <li><code>1-255</code> \u2192 Command failed (false)</li> </ul>"},{"location":"linux/bash_or_shell_scripting/essential_construct/_%24%3F_and_test%20command/#examples_1","title":"Examples","text":""},{"location":"linux/bash_or_shell_scripting/essential_construct/_%24%3F_and_test%20command/#checking-success","title":"Checking Success","text":"<p><pre><code>#!/bin/bash\nls /home\necho \"Exit status: $?\"\n</code></pre> Output (if successful): <pre><code>Exit status: 0\n</code></pre></p>"},{"location":"linux/bash_or_shell_scripting/essential_construct/_%24%3F_and_test%20command/#checking-failure","title":"Checking Failure","text":"<p><pre><code>#!/bin/bash\nls /nonexistent_directory\necho \"Exit status: $?\"\n</code></pre> Output (if the directory doesn\u2019t exist): <pre><code>ls: cannot access '/nonexistent_directory': No such file or directory\nExit status: 2\n</code></pre></p>"},{"location":"linux/bash_or_shell_scripting/essential_construct/_%24%3F_and_test%20command/#using-in-an-if-statement","title":"Using <code>$?</code> in an <code>if</code> Statement","text":"<pre><code>#!/bin/bash\nmkdir test_directory\n\nif [[ $? -eq 0 ]]; then\n    echo \"Directory created successfully\"\nelse\n    echo \"Failed to create directory\"\nfi\n</code></pre>"},{"location":"linux/bash_or_shell_scripting/essential_construct/_%24%3F_and_test%20command/#checking-internet-connection","title":"Checking Internet Connection","text":"<pre><code>#!/bin/bash\nping -c 1 google.com\n\nif [[ $? -eq 0 ]]; then\n    echo \"Internet connection is working\"\nelse\n    echo \"No internet connection\"\nfi\n</code></pre>"},{"location":"linux/bash_or_shell_scripting/essential_construct/_%24%3F_and_test%20command/#summary","title":"Summary","text":"<ul> <li>The <code>test</code> command (or <code>[ ]</code> and <code>[[ ]]</code>) is used for condition testing.</li> <li><code>$?</code> stores the exit status of the last command.</li> <li><code>0</code> means success, while non-zero values indicate failure.</li> <li>Useful for error handling and debugging in scripts.</li> </ul>"},{"location":"linux/bash_or_shell_scripting/essential_construct/arithmetic_operations/","title":"Arithmetic operations","text":"<p>Bash supports arithmetic operations using different methods. Below are some common ways to perform arithmetic calculations in a Bash script.</p>"},{"location":"linux/bash_or_shell_scripting/essential_construct/arithmetic_operations/#1-using-expr-command","title":"1. Using <code>expr</code> Command","text":"<pre><code>#!/bin/bash\na=10\nb=5\nsum=$(expr $a + $b)\necho \"Sum: $sum\"\n</code></pre>"},{"location":"linux/bash_or_shell_scripting/essential_construct/arithmetic_operations/#2-using-recommended","title":"2. Using <code>$(( ))</code> (Recommended)","text":"<pre><code>#!/bin/bash\na=10\nb=5\nsum=$((a + b))\ndiff=$((a - b))\nmul=$((a * b))\ndiv=$((a / b))\nmod=$((a % b))\n\necho \"Sum: $sum\"\necho \"Difference: $diff\"\necho \"Product: $mul\"\necho \"Quotient: $div\"\necho \"Modulus: $mod\"\n</code></pre>"},{"location":"linux/bash_or_shell_scripting/essential_construct/arithmetic_operations/#3-using-let-command","title":"3. Using <code>let</code> Command","text":"<pre><code>#!/bin/bash\na=10\nb=5\nlet sum=a+b\nlet diff=a-b\nlet mul=a*b\nlet div=a/b\nlet mod=a%b\n\necho \"Sum: $sum\"\necho \"Difference: $diff\"\necho \"Product: $mul\"\necho \"Quotient: $div\"\necho \"Modulus: $mod\"\n</code></pre>"},{"location":"linux/bash_or_shell_scripting/essential_construct/arithmetic_operations/#4-using-bc-for-floating-point-arithmetic","title":"4. Using <code>bc</code> for Floating Point Arithmetic","text":"<pre><code>#!/bin/bash\na=10\nb=3\ndiv=$(echo \"scale=2; $a / $b\" | bc)\necho \"Division: $div\"\n</code></pre> <p>If you need floating-point calculations, <code>bc</code> is the best choice.</p>"},{"location":"linux/bash_or_shell_scripting/essential_construct/conditional_statement/","title":"Conditional Statements","text":"<p>Conditional statements in Bash allow scripts to make decisions based on conditions. They control the flow of execution depending on whether a condition evaluates to true or false.</p>"},{"location":"linux/bash_or_shell_scripting/essential_construct/conditional_statement/#1-if-statement","title":"1. <code>if</code> Statement","text":"<p>The <code>if</code> statement executes a block of code only if the condition is true.</p>"},{"location":"linux/bash_or_shell_scripting/essential_construct/conditional_statement/#syntax","title":"Syntax","text":"<pre><code>if [[ condition ]]; then\n    # Commands to execute if condition is true\nfi\n</code></pre>"},{"location":"linux/bash_or_shell_scripting/essential_construct/conditional_statement/#example","title":"Example","text":"<pre><code>#!/bin/bash\nnum=10\n\nif [[ ${num} -gt 5 ]]; then\n    echo \"Number is greater than 5\"\nfi\n</code></pre>"},{"location":"linux/bash_or_shell_scripting/essential_construct/conditional_statement/#2-if-else-statement","title":"2. <code>if-else</code> Statement","text":"<p>The <code>if-else</code> statement allows executing an alternative block of code if the condition is false.</p>"},{"location":"linux/bash_or_shell_scripting/essential_construct/conditional_statement/#syntax_1","title":"Syntax","text":"<pre><code>if [[ condition ]]; then\n    # Commands if condition is true\nelse\n    # Commands if condition is false\nfi\n</code></pre>"},{"location":"linux/bash_or_shell_scripting/essential_construct/conditional_statement/#example_1","title":"Example","text":"<pre><code>#!/bin/bash\nnum=3\n\nif [[ ${num} -gt 5 ]]; then\n    echo \"Number is greater than 5\"\nelse\n    echo \"Number is less than or equal to 5\"\nfi\n</code></pre>"},{"location":"linux/bash_or_shell_scripting/essential_construct/conditional_statement/#3-if-elif-else-statement","title":"3. <code>if-elif-else</code> Statement","text":"<p>The <code>if-elif-else</code> statement is used when there are multiple conditions to check.</p>"},{"location":"linux/bash_or_shell_scripting/essential_construct/conditional_statement/#syntax_2","title":"Syntax","text":"<pre><code>if [[ condition1 ]]; then\n    # Commands if condition1 is true\nelif [[ condition2 ]]; then\n    # Commands if condition2 is true\nelse\n    # Commands if no conditions are true\nfi\n</code></pre>"},{"location":"linux/bash_or_shell_scripting/essential_construct/conditional_statement/#example_2","title":"Example","text":"<pre><code>#!/bin/bash\nnum=0\n\nif [[ ${num} -gt 0 ]]; then\n    echo \"Number is positive\"\nelif [[ ${num} -lt 0 ]]; then\n    echo \"Number is negative\"\nelse\n    echo \"Number is zero\"\nfi\n</code></pre>"},{"location":"linux/bash_or_shell_scripting/essential_construct/conditional_statement/#4-case-statement","title":"4. <code>case</code> Statement","text":"<p>The <code>case</code> statement is used for multiple-choice conditions, similar to a <code>switch</code> statement in other languages.</p>"},{"location":"linux/bash_or_shell_scripting/essential_construct/conditional_statement/#syntax_3","title":"Syntax","text":"<pre><code>case variable in\n    pattern1)\n        # Commands if pattern1 matches\n        ;;\n    pattern2)\n        # Commands if pattern2 matches\n        ;;\n    *)\n        # Default case if no pattern matches\n        ;;\nesac\n</code></pre>"},{"location":"linux/bash_or_shell_scripting/essential_construct/conditional_statement/#example_3","title":"Example","text":"<pre><code>#!/bin/bash\nfruit=\"apple\"\n\ncase ${fruit} in\n    \"apple\")\n        echo \"You chose an apple\"\n        ;;\n    \"banana\")\n        echo \"You chose a banana\"\n        ;;\n    *)\n        echo \"Unknown fruit\"\n        ;;\nesac\n</code></pre>"},{"location":"linux/bash_or_shell_scripting/essential_construct/conditional_statement/#5-ternary-like-and-operators","title":"5. Ternary-Like <code>&amp;&amp;</code> and <code>||</code> Operators","text":"<p>Bash does not have a ternary operator (<code>condition ? true_value : false_value</code>), but you can use <code>&amp;&amp;</code> (AND) and <code>||</code> (OR) to achieve similar results.</p>"},{"location":"linux/bash_or_shell_scripting/essential_construct/conditional_statement/#syntax_4","title":"Syntax","text":"<pre><code>[[ condition ]] &amp;&amp; command_if_true || command_if_false\n</code></pre>"},{"location":"linux/bash_or_shell_scripting/essential_construct/conditional_statement/#example_4","title":"Example","text":"<pre><code>#!/bin/bash\nnum=10\n[[ ${num} -gt 5 ]] &amp;&amp; echo \"Greater than 5\" || echo \"Less than or equal to 5\"\n</code></pre>"},{"location":"linux/bash_or_shell_scripting/essential_construct/conditional_statement/#summary","title":"Summary","text":"<ul> <li><code>if</code>, <code>if-else</code>, and <code>if-elif-else</code> allow checking conditions.</li> <li><code>case</code> is useful for multiple options.</li> <li><code>&amp;&amp;</code> and <code>||</code> provide a shorthand for simple conditions.</li> </ul>"},{"location":"linux/bash_or_shell_scripting/essential_construct/function/","title":"Functions in Bash","text":"<p>Functions in Bash help in code reuse and modular programming. They allow for organizing scripts into manageable sections.</p>"},{"location":"linux/bash_or_shell_scripting/essential_construct/function/#1-defining-and-calling-a-function","title":"1. Defining and Calling a Function","text":"<p>A function is defined using the following syntax :-</p> <p><pre><code>function function_name() {\n    # Commands\n}\n</code></pre> OR <pre><code>function_name() {\n    # Commands\n}\n</code></pre></p>"},{"location":"linux/bash_or_shell_scripting/essential_construct/function/#example","title":"Example:","text":"<p><pre><code>#!/bin/bash\n\nfunction greet() {\n    echo \"Hello, ${1}!\"\n}\n\ngreet \"World\"\ngreet \"User\"\n</code></pre> Output: <pre><code>Hello, World!\nHello, User!\n</code></pre></p>"},{"location":"linux/bash_or_shell_scripting/essential_construct/function/#2-function-with-return-value","title":"2. Function with Return Value","text":"<p>Bash functions can return values using <code>echo</code> or <code>return</code>.</p>"},{"location":"linux/bash_or_shell_scripting/essential_construct/function/#example_1","title":"Example:","text":"<p><pre><code>#!/bin/bash\n\nadd() {\n    result=$(( ${1} + ${2} ))\n    echo $result\n}\n\nsum=$(add 10 5)\necho \"Sum: ${sum}\"\n</code></pre> Output: <pre><code>Sum: 15\n</code></pre></p>"},{"location":"linux/bash_or_shell_scripting/essential_construct/function/#3-function-with-local-variables","title":"3. Function with Local Variables","text":"<p>Use <code>local</code> to declare function-specific variables.</p>"},{"location":"linux/bash_or_shell_scripting/essential_construct/function/#example_2","title":"Example:","text":"<pre><code>#!/bin/bash\n\ndemo_function() {\n    local name=\"Bash\"\n    echo \"This is a function in ${name}\"\n}\n\ndemo_function\n</code></pre>"},{"location":"linux/bash_or_shell_scripting/essential_construct/function/#4-function-with-return-statement","title":"4. Function with Return Statement","text":"<p>Functions can use <code>return</code> to provide an exit status (0 for success, non-zero for failure).</p>"},{"location":"linux/bash_or_shell_scripting/essential_construct/function/#example_3","title":"Example:","text":"<pre><code>#!/bin/bash\n\ncheck_even() {\n    if (( ${1} % 2 == 0 )); then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncheck_even 4\nif [[ $? -eq 0 ]]; then\n    echo \"Even number\"\nelse\n    echo \"Odd number\"\nfi\n</code></pre>"},{"location":"linux/bash_or_shell_scripting/essential_construct/function/#summary","title":"Summary","text":"<ul> <li>Functions help organize and reuse code.</li> <li>Parameters are passed like script arguments: <code>${1}</code>, <code>${2}</code>, etc.</li> <li>Use <code>local</code> to limit variable scope.</li> <li><code>return</code> can be used for exit codes, while <code>echo</code> returns values.</li> <li>Functions can be recursive for complex tasks.</li> </ul>"},{"location":"linux/bash_or_shell_scripting/essential_construct/loops/","title":"Loops in Bash Scripting","text":"<p>Loops in Bash allow executing a block of code multiple times until a certain condition is met. They are useful for automating repetitive tasks.</p>"},{"location":"linux/bash_or_shell_scripting/essential_construct/loops/#1-for-loop","title":"1. <code>for</code> Loop","text":"<p>The <code>for</code> loop iterates over a range, list, or command output.</p>"},{"location":"linux/bash_or_shell_scripting/essential_construct/loops/#syntax","title":"Syntax","text":"<pre><code>for variable in list; do\n    # Commands\ndone\n</code></pre>"},{"location":"linux/bash_or_shell_scripting/essential_construct/loops/#example-1-looping-through-a-list","title":"Example 1 :- Looping Through a List","text":"<pre><code>#!/bin/bash\n\nfor fruit in apple banana cherry; do\n    echo \"Fruit: $fruit\"\ndone\n</code></pre>"},{"location":"linux/bash_or_shell_scripting/essential_construct/loops/#example-2-looping-through-a-range","title":"Example 2 :- Looping Through a Range","text":"<pre><code>#!/bin/bash\n\nfor i in {1..5}; do\n    echo \"Number: ${i}\"\ndone\n</code></pre>"},{"location":"linux/bash_or_shell_scripting/essential_construct/loops/#example-3-c-style-for-loop","title":"Example 3 :- C-Style <code>for</code> Loop","text":"<pre><code>#!/bin/bash\n\nfor ((i=1; i&lt;=5; i++)); do\n    echo \"Iteration: ${i}\"\ndone\n</code></pre>"},{"location":"linux/bash_or_shell_scripting/essential_construct/loops/#2-while-loop","title":"2. <code>while</code> Loop","text":"<p>A <code>while</code> loop runs as long as a condition remains true.</p>"},{"location":"linux/bash_or_shell_scripting/essential_construct/loops/#syntax_1","title":"Syntax","text":"<pre><code>while [ condition ]; do\n    # Commands\ndone\n</code></pre>"},{"location":"linux/bash_or_shell_scripting/essential_construct/loops/#example","title":"Example","text":"<pre><code>#!/bin/bash\n\ncount=1\nwhile [[ ${count} -le 5 ]]; do\n    echo \"Count: ${count}\"\n    ((count++))\ndone\n</code></pre>"},{"location":"linux/bash_or_shell_scripting/essential_construct/loops/#3-until-loop","title":"3. <code>until</code> Loop","text":"<p>An <code>until</code> loop runs until a condition becomes true (opposite of <code>while</code>).</p>"},{"location":"linux/bash_or_shell_scripting/essential_construct/loops/#syntax_2","title":"Syntax","text":"<pre><code>until [ condition ]; do\n    # Commands\ndone\n</code></pre>"},{"location":"linux/bash_or_shell_scripting/essential_construct/loops/#example_1","title":"Example","text":"<pre><code>#!/bin/bash\n\nnum=1\nuntil [[ ${num} -gt 5 ]]; do\n    echo \"Number: ${num}\"\n    ((num++))\ndone\n</code></pre>"},{"location":"linux/bash_or_shell_scripting/essential_construct/loops/#4-select-loop-for-menus","title":"4. <code>select</code> Loop (For Menus)","text":"<p>The <code>select</code> loop is used to create interactive menus.</p>"},{"location":"linux/bash_or_shell_scripting/essential_construct/loops/#syntax_3","title":"Syntax","text":"<pre><code>select variable in list; do\n    # Commands\ndone\n</code></pre>"},{"location":"linux/bash_or_shell_scripting/essential_construct/loops/#example_2","title":"Example","text":"<pre><code>#!/bin/bash\n\n# PS3=\"Choose a fruit? \"  # for replacing #?\necho \"Choose a fruit:\"\nselect fruit in Apple Banana Cherry; do\n    case ${fruit} in\n        Apple)\n            echo \"You chose Apple\"\n            break\n            ;;\n        Banana) \n            echo \"You chose Banana\"\n            break\n            ;;\n        Cherry) \n            echo \"You chose Cherry\"\n            break\n            ;;\n        *) \n            echo \"Invalid option\"\n    esac\ndone\n</code></pre>"},{"location":"linux/bash_or_shell_scripting/essential_construct/loops/#breaking-and-continuing-loops","title":"Breaking and Continuing Loops","text":"<ul> <li><code>break</code> \u2013 Exits the loop entirely.</li> <li><code>continue</code> \u2013 Skips the current iteration and moves to the next.</li> </ul>"},{"location":"linux/bash_or_shell_scripting/essential_construct/loops/#example-using-break","title":"Example :- Using <code>break</code>","text":"<pre><code>#!/bin/bash\n\nfor i in {1..10}; do\n    if [[ ${i} -eq 5 ]]; then\n        break\n    fi\n    echo \"Number: ${i}\"\ndone\n</code></pre>"},{"location":"linux/bash_or_shell_scripting/essential_construct/loops/#example-using-continue","title":"Example :- Using <code>continue</code>","text":"<pre><code>#!/bin/bash\n\nfor i in {1..5}; do\n    if [[ ${i} -eq 3 ]]; then\n        continue\n    fi\n    echo \"Number: ${i}\"\ndone\n</code></pre>"},{"location":"linux/bash_or_shell_scripting/essential_construct/nested_loop/","title":"Nested Loops in Bash","text":"<p>Nested loops allow looping inside another loop, enabling complex iteration patterns in Bash scripting.</p>"},{"location":"linux/bash_or_shell_scripting/essential_construct/nested_loop/#syntax","title":"Syntax","text":"<pre><code>for var1 in list1; do\n    for var2 in list2; do\n        # Commands\n    done\ndone\n</code></pre>"},{"location":"linux/bash_or_shell_scripting/essential_construct/nested_loop/#example-nested-for-loops","title":"Example :- Nested <code>for</code> Loops","text":"<p><pre><code>#!/bin/bash\n\nfor i in {1..3}; do\n    for j in {A..C}; do\n        echo \"Outer: ${i}, Inner: ${j}\"\n    done\ndone\n</code></pre> Output <pre><code>Outer: 1, Inner: A\nOuter: 1, Inner: B\nOuter: 1, Inner: C\nOuter: 2, Inner: A\nOuter: 2, Inner: B\nOuter: 2, Inner: C\nOuter: 3, Inner: A\nOuter: 3, Inner: B\nOuter: 3, Inner: C\n</code></pre></p>"},{"location":"linux/bash_or_shell_scripting/essential_construct/nested_loop/#example-nested-while-loop","title":"Example :- Nested <code>while</code> Loop","text":"<pre><code>#!/bin/bash\n\nouter=1\nwhile [[ ${outer} -le 3 ]]; do\n    inner=1\n    while [[ ${inner} -le 2 ]]; do\n        echo \"Outer: ${outer}, Inner: ${inner}\"\n        ((inner++))\n    done\n    ((outer++))\ndone\n</code></pre>"},{"location":"linux/bash_or_shell_scripting/essential_construct/nested_loop/#combining-for-and-while-loops","title":"Combining <code>for</code> and <code>while</code> Loops","text":"<pre><code>#!/bin/bash\n\nfor i in {1..2}; do\n    count=1\n    while [[ ${count} -le 3 ]]; do\n        echo \"For Loop: ${i}, While Loop: ${count}\"\n        ((count++))\n    done\ndone\n</code></pre>"},{"location":"linux/bash_or_shell_scripting/essential_construct/read_command_and_command-line_arguments/","title":"Read Command &amp; Command-Line Arguments","text":""},{"location":"linux/bash_or_shell_scripting/essential_construct/read_command_and_command-line_arguments/#1-read-command","title":"1. Read Command","text":"<p>The <code>read</code> command is used to take input from user in Bash scripts.</p>"},{"location":"linux/bash_or_shell_scripting/essential_construct/read_command_and_command-line_arguments/#basic-usage","title":"Basic Usage","text":"<p><pre><code>#!/bin/bash\necho \"Enter your name: \"\nread name\necho \"Hello, $name!\"\n</code></pre> - Prompts the user for input. - Stores the input in the variable <code>name</code>.</p>"},{"location":"linux/bash_or_shell_scripting/essential_construct/read_command_and_command-line_arguments/#reading-multiple-values","title":"Reading Multiple Values","text":"<p><pre><code>#!/bin/bash\necho \"Enter two values: \"\nread var1 var2\necho \"You entered: $var1 and $var2\"\n</code></pre> - Reads multiple values separated by spaces.</p>"},{"location":"linux/bash_or_shell_scripting/essential_construct/read_command_and_command-line_arguments/#silent-input-password-entry","title":"Silent Input (Password Entry)","text":"<p><pre><code>#!/bin/bash\necho \"Enter password: \"\nread -s password\necho \"Password received.\"\n</code></pre> - The <code>-s</code> flag hides the input for secure password entry.</p>"},{"location":"linux/bash_or_shell_scripting/essential_construct/read_command_and_command-line_arguments/#using-a-prompt-in-read-command","title":"Using a Prompt in Read Command","text":"<p><pre><code>read -p \"Enter your age: \" age\necho \"You entered: $age\"\n</code></pre> - The <code>-p</code> flag allows displaying a prompt message before input.</p>"},{"location":"linux/bash_or_shell_scripting/essential_construct/read_command_and_command-line_arguments/#setting-a-timeout-for-input","title":"Setting a Timeout for Input","text":"<p><pre><code>read -t 5 -p \"Enter your name within 5 seconds: \" name\necho \"Hello, $name!\"\n</code></pre> - The <code>-t</code> flag sets a timeout in seconds.</p>"},{"location":"linux/bash_or_shell_scripting/essential_construct/read_command_and_command-line_arguments/#providing-a-default-value","title":"Providing a Default Value","text":"<p><pre><code>read -p \"Enter your name (default: John): \" name\nname=${name:-John}\necho \"Hello, $name!\"\n</code></pre> - Uses a default value if no input is given.</p>"},{"location":"linux/bash_or_shell_scripting/essential_construct/read_command_and_command-line_arguments/#restricting-input-to-a-single-character","title":"Restricting Input to a Single Character","text":"<p><pre><code>read -n 1 -p \"Press any key to continue...\" key\necho \"You pressed: $key\"\n</code></pre> - The <code>-n</code> flag restricts input to a single character.</p>"},{"location":"linux/bash_or_shell_scripting/essential_construct/read_command_and_command-line_arguments/#reading-from-a-file","title":"Reading from a File","text":"<p><pre><code>while read line; do\n    echo \"$line\"\ndone &lt; file.txt\n</code></pre> - Reads each line from <code>file.txt</code> and prints it.</p>"},{"location":"linux/bash_or_shell_scripting/essential_construct/read_command_and_command-line_arguments/#2-command-line-arguments","title":"2. Command-Line Arguments","text":"<p>Command-line arguments allow users to pass data to a Bash script when executing it.</p>"},{"location":"linux/bash_or_shell_scripting/essential_construct/read_command_and_command-line_arguments/#basic-usage_1","title":"Basic Usage","text":"<p>When running a script, arguments are passed after the script name: <pre><code>./script.sh arg1 arg2 arg3\n</code></pre></p>"},{"location":"linux/bash_or_shell_scripting/essential_construct/read_command_and_command-line_arguments/#accessing-command-line-arguments","title":"Accessing Command-Line Arguments","text":"<p>Bash provides special variables to access arguments:</p> Variable Description <code>$0</code> Script name like <code>./script.sh</code> <code>$1, $2, ...</code> Positional parameters (arguments) <code>$#</code> Number of arguments passed <code>$@</code> All arguments as separate strings <code>$*</code> All arguments as a single string <code>$$</code> Process ID of the script <code>$?</code> Exit status of the last executed command"},{"location":"linux/bash_or_shell_scripting/essential_construct/read_command_and_command-line_arguments/#example-script","title":"Example Script","text":"<pre><code>#!/bin/bash\necho \"Script name: ${0}\"\necho \"First argument: ${1}\"\necho \"Second argument: ${2}\"\necho \"Total arguments: $#\"\n</code></pre>"},{"location":"linux/bash_or_shell_scripting/essential_construct/read_command_and_command-line_arguments/#run-the-script","title":"Run the script:","text":"<pre><code>./script.sh Hello World\n</code></pre>"},{"location":"linux/bash_or_shell_scripting/essential_construct/read_command_and_command-line_arguments/#output","title":"Output:","text":"<pre><code>Script name: ./script.sh\nFirst argument: Hello\nSecond argument: World\nTotal arguments: 2\n</code></pre>"},{"location":"linux/bash_or_shell_scripting/essential_construct/read_command_and_command-line_arguments/#looping-through-arguments","title":"Looping Through Arguments","text":"<pre><code>#!/bin/bash\necho \"All arguments:\"\nfor arg in \"$@\"; do\n    echo \"$arg\"\ndone\n</code></pre>"},{"location":"linux/bash_or_shell_scripting/essential_construct/read_command_and_command-line_arguments/#output-if-run-as","title":"Output if run as:","text":"<p><pre><code>./script.sh apple banana cherry\n</code></pre> <pre><code>All arguments:\napple\nbanana\ncherry\n</code></pre></p>"},{"location":"linux/bash_or_shell_scripting/essential_construct/read_command_and_command-line_arguments/#difference-between-and","title":"Difference Between <code>$@</code> and <code>$*</code>","text":"<ul> <li><code>$@</code> treats arguments as separate strings.</li> <li><code>$*</code> treats all arguments as a single string.</li> </ul> <p>Example: <pre><code>#!/bin/bash\necho \"Using \\$@\"\nfor arg in \"$@\"; do\n    echo \"$arg\"\ndone\n\necho \"Using \\$*\"\nfor arg in \"$*\"; do\n    echo \"$arg\"\ndone\n</code></pre></p>"},{"location":"linux/bash_or_shell_scripting/essential_construct/read_command_and_command-line_arguments/#run-the-script_1","title":"Run the script:","text":"<pre><code>./script.sh \"one two\" three\n</code></pre>"},{"location":"linux/bash_or_shell_scripting/essential_construct/read_command_and_command-line_arguments/#output_1","title":"Output:","text":"<pre><code>Using $@\none two\nthree\n\nUsing $*\none two three\n</code></pre>"},{"location":"linux/bash_or_shell_scripting/essential_construct/variables/","title":"Variables","text":"<p>A variable in Bash is a placeholder for storing data, which can be referenced and manipulated throughout a script.</p>"},{"location":"linux/bash_or_shell_scripting/essential_construct/variables/#types-of-variables-in-bash","title":"Types of Variables in Bash","text":""},{"location":"linux/bash_or_shell_scripting/essential_construct/variables/#1-user-defined-variables","title":"1. User-Defined Variables","text":"<ul> <li>Created by the user for storing values.</li> <li>No spaces around <code>=</code> when assigning values.</li> <li>Example:   <pre><code>name=\"Alice\"\necho \"Hello, $name!\"\n</code></pre></li> </ul>"},{"location":"linux/bash_or_shell_scripting/essential_construct/variables/#2-system-variables","title":"2. System Variables","text":"<ul> <li>A system variable in Bash (or any Unix-like system) is a predefined environment variable that holds information about the system, user, or shell session. These variables are usually uppercase and are available globally in the shell environment.</li> </ul> <p>Common System Variables</p> Variable Description <code>$HOME</code> User's home directory <code>$USER</code> Current logged-in username <code>$PATH</code> Directories searched for executables <code>$SHELL</code> Default shell (e.g., <code>/bin/bash</code>) <code>$PWD</code> Current working directory <code>$OLDPWD</code> Previous working directory <code>$UID</code> User ID of the current user <code>$HOSTNAME</code> Name of the system (host) <code>$LANG</code> System language setting <code>$LOGNAME</code> Login name of the user <code>$TERM</code> Type of terminal in use <ul> <li>Example:   <pre><code>echo \"User: $USER\"\necho \"Home Directory: $HOME\"\n</code></pre></li> </ul>"},{"location":"linux/bash_or_shell_scripting/essential_construct/variables/#3-special-variables","title":"3. Special Variables","text":"<ul> <li><code>$?</code> - Exit status of last command.</li> <li><code>$$</code> - Process ID of the script.</li> <li><code>$#</code> - Number of arguments passed.</li> <li><code>$@</code> - All arguments as separate words.</li> <li>Example:   <pre><code>echo \"Script PID: $$\"\necho \"Number of arguments: $#\"\n</code></pre></li> </ul>"},{"location":"linux/bash_or_shell_scripting/essential_construct/variables/#4-readonly-variables","title":"4. Readonly Variables","text":"<ul> <li>Cannot be modified after assignment.</li> <li>Example:   <pre><code>readonly PI=3.1415\necho \"Value of PI: $PI\"\n</code></pre></li> </ul>"},{"location":"linux/bash_or_shell_scripting/essential_construct/variables/#5-local-variables","title":"5. Local Variables","text":"<ul> <li>Defined within a function and accessible only inside it.</li> <li>Example:   <pre><code>my_function() {\n    local local_var=\"I am local\"\n    echo \"$local_var\"\n}\nmy_function\n</code></pre></li> </ul>"},{"location":"linux/bash_or_shell_scripting/essential_construct/variables/#6-unsetting-variables","title":"6. Unsetting Variables","text":"<ul> <li>Removes a variable from memory.</li> <li>Example:   <pre><code>name=\"Alice\"\nunset name\necho \"Name: $name\"  # Will print an empty value\n</code></pre></li> </ul>"},{"location":"linux/linux_commands/","title":"Linux Commands","text":"<p>Linux commands are essential for controlling and managing the system through the terminal. These commands are used for tasks like file handling, process management, user administration, networking, and system monitoring.</p> <p></p>"},{"location":"linux/linux_commands/#contents","title":"Contents","text":""},{"location":"linux/linux_commands/imp_to_know/","title":"Important To Know","text":""},{"location":"linux/linux_commands/imp_to_know/#1environment-variables","title":"1.Environment Variables","text":"<p>Environment variables are key-value pairs that define system-wide or user-specific configurations. These variables influence how processes and applications behave in the shell.</p>"},{"location":"linux/linux_commands/imp_to_know/#viewing-environment-variables","title":"Viewing Environment Variables","text":"<pre><code>printenv\n</code></pre> <p>Displays all environment variables.</p>"},{"location":"linux/linux_commands/imp_to_know/#common-environment-variables","title":"Common Environment Variables","text":"Variable Description <code>$PATH</code> Directories where executables are searched for commands <code>$USER</code> Current logged-in user <code>$SHELL</code> Default shell being used <code>$PWD</code> Current working directory"},{"location":"linux/linux_commands/imp_to_know/#setting-environment-variables","title":"Setting Environment Variables","text":""},{"location":"linux/linux_commands/imp_to_know/#temporarily-valid-for-the-session-only","title":"Temporarily (valid for the session only)","text":"<pre><code>export MY_VAR=\"Hello World\"\n</code></pre> <p>Sets <code>MY_VAR</code> for the current session.</p>"},{"location":"linux/linux_commands/imp_to_know/#permanently-valid-even-after-logout","title":"Permanently (valid even after logout)","text":"<p>Add the following line to <code>~/.bashrc</code> <pre><code>export MY_VAR=\"Hello World\"\n</code></pre></p>"},{"location":"linux/linux_commands/imp_to_know/#2-aliases","title":"2. Aliases","text":"<p>An alias is a shortcut for a command or a series of commands, allowing you to type less and work efficiently.</p>"},{"location":"linux/linux_commands/imp_to_know/#creating-an-alias","title":"Creating an Alias","text":"<pre><code>alias ll=\"ls -lah\"\n</code></pre> <p>Now typing <code>ll</code> runs <code>ls -lah</code> (detailed directory listing).</p>"},{"location":"linux/linux_commands/imp_to_know/#viewing-existing-aliases","title":"Viewing Existing Aliases","text":"<pre><code>alias\n</code></pre> <p>Displays all defined aliases.</p>"},{"location":"linux/linux_commands/imp_to_know/#removing-an-alias","title":"Removing an Alias","text":"<pre><code>unalias ll\n</code></pre> <p>Deletes the alias <code>ll</code>.</p>"},{"location":"linux/linux_commands/imp_to_know/#making-aliases-permanent","title":"Making Aliases Permanent","text":"<p>To keep an alias after logout, add it to <code>~/.bashrc</code> <pre><code>echo 'alias ll=\"ls -lah\"' &gt;&gt; ~/.bashrc\n</code></pre> Then, apply the changes: <pre><code>source ~/.bashrc\n</code></pre></p>"},{"location":"linux/linux_commands/imp_to_know/#3path-in-linux","title":"3.<code>$PATH</code> in Linux","text":"<p><code>$PATH</code> is an environment variable that stores a list of directories where the system searches for executable files when you enter a command in the terminal. It determines which programs can be run without specifying their full path.  </p>"},{"location":"linux/linux_commands/imp_to_know/#viewing-the-path-variable","title":"Viewing the <code>$PATH</code> Variable","text":"<p>To see your current <code>PATH</code>, run: <pre><code>echo $PATH\n</code></pre></p> <p>This displays a colon-separated list of directories.  </p>"},{"location":"linux/linux_commands/imp_to_know/#example-output","title":"Example Output:","text":"<p><pre><code>/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n</code></pre> Each directory in this list is checked in order when you type a command.  </p>"},{"location":"linux/linux_commands/imp_to_know/#how-path-works","title":"How <code>$PATH</code> Works?","text":"<ul> <li>If you type <code>ls</code>, the system looks in each directory listed in <code>$PATH</code> until it finds <code>/bin/ls</code>.  </li> <li>If the command is not in any of the directories, you'll see: <pre><code>command not found\n</code></pre></li> </ul>"},{"location":"linux/linux_commands/imp_to_know/#temporarily-adding-a-directory-to-path","title":"Temporarily Adding a Directory to <code>$PATH</code>","text":"<pre><code>export PATH=$PATH:/home/user/my_scripts\n</code></pre> <p>Adds <code>/home/user/my_scripts</code> to <code>$PATH</code> for the current session.  </p>"},{"location":"linux/linux_commands/imp_to_know/#permanently-adding-a-directory-to-path","title":"Permanently Adding a Directory to <code>$PATH</code>","text":"<p>To make it permanent, add the line to <code>~/.bashrc</code> <pre><code>echo 'export PATH=$PATH:/home/user/my_scripts' &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n</code></pre></p>"},{"location":"linux/linux_commands/imp_to_know/#key-points","title":"Key Points","text":"<p>\u2714 <code>$PATH</code> stores directories where the system looks for executable files. \u2714 Commands in <code>$PATH</code> can be run from anywhere. \u2714 You can modify <code>$PATH</code> to include custom directories.  </p>"},{"location":"linux/linux_commands/imp_to_know/#4-cron-command-in-linux","title":"4. Cron Command in Linux","text":"<p><code>cron</code> is a time-based job scheduler in Linux that allows users to automate tasks at scheduled intervals. It is useful for running scripts, backups, system maintenance, and more.</p>"},{"location":"linux/linux_commands/imp_to_know/#what-is-crontab","title":"What is <code>crontab</code>?","text":"<p><code>crontab</code> (cron table) is a file that stores scheduled jobs for a user or system.</p>"},{"location":"linux/linux_commands/imp_to_know/#viewing-the-current-cron-jobs","title":"Viewing the Current Cron Jobs","text":"<pre><code>crontab -l\n</code></pre> <p>Displays the list of scheduled jobs for the current user.</p>"},{"location":"linux/linux_commands/imp_to_know/#editing-the-cron-jobs","title":"Editing the Cron Jobs","text":"<pre><code>crontab -e\n</code></pre> <p>Opens the cron editor to add or modify scheduled tasks.</p>"},{"location":"linux/linux_commands/imp_to_know/#cron-job-syntax","title":"Cron Job Syntax","text":"<p>A cron job follows this format: <pre><code>MIN HOUR DOM MON DOW COMMAND\n</code></pre></p> Field Description <code>MIN</code> Minute (0 - 59) <code>HOUR</code> Hour (0 - 23) <code>DOM</code> Day of Month (1 - 31) <code>MON</code> Month (1 - 12) <code>DOW</code> Day of the Week (0 - 7, where 0 and 7 = Sunday) <code>COMMAND</code> The script or command to execute"},{"location":"linux/linux_commands/imp_to_know/#examples","title":"Examples","text":"<pre><code>0 2 * * * /home/user/myscript.sh\n</code></pre> <p>Run a Script Every Day at 2 AM</p> <pre><code>*/5 * * * * echo \"Hello, World!\" &gt;&gt; /home/user/log.txt\n</code></pre> <p>Run a Command Every 5 Minutes</p> <pre><code>0 10 * * 1 /home/user/weekly_report.sh\n</code></pre> <p>Run a Task Every Monday at 10 AM</p> <pre><code>0 0 1 * * /home/user/monthly_cleanup.sh\n</code></pre> <p>Run a Task on the 1<sup>st</sup> of Every Month at Midnight</p> <pre><code>crontab -r\n</code></pre> <p>Deletes all scheduled jobs for the current user.</p>"},{"location":"linux/linux_commands/imp_to_know/#cron-special-keywords","title":"Cron Special Keywords","text":"Keyword Equivalent To <code>@reboot</code> Runs once at system startup <code>@hourly</code> Runs every hour (<code>0 * * * *</code>) <code>@daily</code> Runs once a day (<code>0 0 * * *</code>) <code>@weekly</code> Runs once a week (<code>0 0 * * 0</code>) <code>@monthly</code> Runs once a month (<code>0 0 1 * *</code>) <code>@yearly</code> Runs once a year (<code>0 0 1 1 *</code>)"},{"location":"linux/linux_commands/imp_to_know/#5-history-command-in-linux","title":"5. History Command in Linux","text":"<p>The <code>history</code> command in Linux allows users to view previously executed commands in the terminal. It helps in tracking past commands and re-executing them easily.</p>"},{"location":"linux/linux_commands/imp_to_know/#viewing-command-history","title":"Viewing Command History","text":"<pre><code>history\n</code></pre> <p>Displays a list of previously executed commands with line numbers.</p>"},{"location":"linux/linux_commands/imp_to_know/#searching-command-history","title":"Searching Command History","text":"<pre><code>Ctrl + R\n</code></pre> <p>Starts a reverse search. Type a keyword to find a previously used command.</p>"},{"location":"linux/linux_commands/imp_to_know/#clearing-command-history","title":"Clearing Command History","text":"<pre><code>history -c\n</code></pre> <p>Clears the entire history.</p> <pre><code>history -d &lt;line_number&gt;\n</code></pre> <p>Deletes a specific command from history.</p>"},{"location":"linux/linux_commands/imp_to_know/#saving-and-reloading-command-history","title":"Saving and Reloading Command History","text":"<pre><code>history -w\n</code></pre> <p>Saves the current session\u2019s history to the history file.</p> <pre><code>history -r\n</code></pre> <p>Reloads the history from the saved history file.</p>"},{"location":"linux/linux_commands/imp_to_know/#managing-persistent-history","title":"Managing Persistent History","text":"<p>Linux stores command history in a file called <code>.bash_history</code>. You can view it using: <pre><code>cat ~/.bash_history\n</code></pre></p> <p>To ensure that commands are saved immediately to history, use: <pre><code>export HISTCONTROL=ignoredups:erasedups  # No duplicate entries\nexport HISTSIZE=1000  # Set history size\nexport HISTFILESIZE=2000  # Set history file size\nshopt -s histappend  # Append to history file, rather than overwrite\nhistory -a  # Append new history lines to history file\n</code></pre></p>"},{"location":"linux/linux_commands/pipe_operator/","title":"Pipe Operator","text":"<p>The pipe operator (<code>|</code>) in Linux is used to pass the output of one command as input to another command. This allows chaining multiple commands together to perform complex operations efficiently.</p>"},{"location":"linux/linux_commands/pipe_operator/#syntax","title":"Syntax","text":"<p><pre><code>command1 | command2\n</code></pre> <code>command1</code> produces output, the output of <code>command1</code> is passed as input to <code>command2</code>.</p>"},{"location":"linux/linux_commands/pipe_operator/#examples","title":"Examples","text":"<pre><code>sort file.txt | head -n 5\n</code></pre> <p>Sorts <code>file.txt</code> and then displays only the first 5 lines.</p> <pre><code>ls -1 | wc -l\n</code></pre> <p>Lists files (<code>ls -1</code>), then counts the lines (<code>wc -l</code>), giving the total number of files.</p> <pre><code>cat file.txt | grep \"keyword\"\n</code></pre> <p>Displays only the lines containing \"keyword\" from <code>file.txt</code>.</p>"},{"location":"linux/linux_commands/pipe_operator/#benefits-of-using-pipes","title":"Benefits of Using Pipes","text":"<p>\u2705 Avoids creating temporary files \u2705 Increases efficiency by combining commands \u2705 Simplifies complex tasks  </p> <p>\ud83d\udca1 Tip: Use multiple pipes to chain more than two commands together!</p> <pre><code>ls -l | grep \"txt\" | wc -l\n</code></pre> <p>Finds and counts the number of <code>.txt</code> files in a directory.</p>"},{"location":"linux/linux_commands/essential_construct/file_%26_dir_management/","title":"File &amp; Directory Management Commands","text":""},{"location":"linux/linux_commands/essential_construct/file_%26_dir_management/#1-man-manual-pages","title":"1. <code>man</code> - Manual Pages","text":""},{"location":"linux/linux_commands/essential_construct/file_%26_dir_management/#syntax","title":"Syntax","text":"<pre><code>man [command_name]\n</code></pre>"},{"location":"linux/linux_commands/essential_construct/file_%26_dir_management/#description","title":"Description","text":"<p>The <code>man</code> command displays the manual (help documentation) for a specified Linux command. It provides detailed information, including syntax, options, examples, and descriptions.</p>"},{"location":"linux/linux_commands/essential_construct/file_%26_dir_management/#examples","title":"Examples","text":"<pre><code>man ls\n</code></pre> <p>Shows documentation for the <code>ls</code> command.</p>"},{"location":"linux/linux_commands/essential_construct/file_%26_dir_management/#2-ls-list-directory-contents","title":"2. <code>ls</code> - List Directory Contents","text":""},{"location":"linux/linux_commands/essential_construct/file_%26_dir_management/#syntax_1","title":"Syntax","text":"<pre><code>ls [options] [directory]\n</code></pre>"},{"location":"linux/linux_commands/essential_construct/file_%26_dir_management/#description_1","title":"Description","text":"<p>The <code>ls</code> command lists files and directories in the current or specified directory.</p>"},{"location":"linux/linux_commands/essential_construct/file_%26_dir_management/#common-options","title":"Common Options","text":"Option Description <code>-a</code> Show all files, including hidden ones <code>-l</code> Display detailed file information <code>-h</code> Show file sizes in human-readable format <code>-t</code> Sort files by modification time <code>-r</code> Reverse the order of output"},{"location":"linux/linux_commands/essential_construct/file_%26_dir_management/#examples_1","title":"Examples","text":"<pre><code>ls -lh\n</code></pre> <p>Lists files with human-readable sizes.</p>"},{"location":"linux/linux_commands/essential_construct/file_%26_dir_management/#3-pwd-print-working-directory","title":"3. <code>pwd</code> - Print Working Directory","text":""},{"location":"linux/linux_commands/essential_construct/file_%26_dir_management/#syntax_2","title":"Syntax","text":"<pre><code>pwd\n</code></pre>"},{"location":"linux/linux_commands/essential_construct/file_%26_dir_management/#description_2","title":"Description","text":"<p>The <code>pwd</code> command prints the full path of the current working directory.</p>"},{"location":"linux/linux_commands/essential_construct/file_%26_dir_management/#examples_2","title":"Examples","text":"<pre><code>pwd\n</code></pre> <p>Outputs: <code>/home/user/documents</code></p>"},{"location":"linux/linux_commands/essential_construct/file_%26_dir_management/#4-cd-change-directory","title":"4. <code>cd</code> - Change Directory","text":""},{"location":"linux/linux_commands/essential_construct/file_%26_dir_management/#syntax_3","title":"Syntax","text":"<pre><code>cd [directory]\n</code></pre>"},{"location":"linux/linux_commands/essential_construct/file_%26_dir_management/#description_3","title":"Description","text":"<p>The <code>cd</code> command is used to navigate between directories.</p>"},{"location":"linux/linux_commands/essential_construct/file_%26_dir_management/#common-usage","title":"Common Usage","text":"Command Description <code>cd /path/to/directory</code> Moves to the specified directory <code>cd ..</code> Moves to the previous directory <code>cd ~</code> Moves to the home directory <code>cd /</code> Moves to the root directory"},{"location":"linux/linux_commands/essential_construct/file_%26_dir_management/#examples_3","title":"Examples","text":"<pre><code>cd /var/log\n</code></pre> <p>Changes to the <code>/var/log</code> directory.</p> <pre><code>cd ..\n</code></pre> <p>Moves to the previous directory.</p>"},{"location":"linux/linux_commands/essential_construct/file_%26_dir_management/#5-mkdir-create-directories","title":"5. <code>mkdir</code> - Create Directories","text":""},{"location":"linux/linux_commands/essential_construct/file_%26_dir_management/#syntax_4","title":"Syntax","text":"<pre><code>mkdir [options] directory_name\n</code></pre>"},{"location":"linux/linux_commands/essential_construct/file_%26_dir_management/#description_4","title":"Description","text":"<p>The <code>mkdir</code> command creates new directories.</p>"},{"location":"linux/linux_commands/essential_construct/file_%26_dir_management/#common-options_1","title":"Common Options","text":"Option Description <code>-p</code> Create parent directories if they don\u2019t exist"},{"location":"linux/linux_commands/essential_construct/file_%26_dir_management/#examples_4","title":"Examples","text":"<pre><code>mkdir my_folder\n</code></pre> <p>Creates a directory named <code>my_folder</code>.</p> <pre><code>mkdir -p parent/child\n</code></pre> <p>Creates <code>parent</code> and <code>child</code> directories if they do not exist.</p>"},{"location":"linux/linux_commands/essential_construct/file_%26_dir_management/#6-touch-create-or-update-files","title":"6. <code>touch</code> - Create or Update Files","text":""},{"location":"linux/linux_commands/essential_construct/file_%26_dir_management/#syntax_5","title":"Syntax","text":"<pre><code>touch [options] filename\n</code></pre>"},{"location":"linux/linux_commands/essential_construct/file_%26_dir_management/#description_5","title":"Description","text":"<p>The <code>touch</code> command creates an empty file or updates the timestamp of an existing file.</p>"},{"location":"linux/linux_commands/essential_construct/file_%26_dir_management/#examples_5","title":"Examples","text":"<pre><code>touch myfile.txt\n</code></pre> <p>Creates an empty file named <code>myfile.txt</code>.</p>"},{"location":"linux/linux_commands/essential_construct/file_%26_dir_management/#7-file-determine-file-type","title":"7. <code>file</code> - Determine File Type","text":""},{"location":"linux/linux_commands/essential_construct/file_%26_dir_management/#syntax_6","title":"Syntax","text":"<pre><code>file [options] filename\n</code></pre>"},{"location":"linux/linux_commands/essential_construct/file_%26_dir_management/#description_6","title":"Description","text":"<p>The <code>file</code> command determines the type of a file based on its content, rather than its extension.</p>"},{"location":"linux/linux_commands/essential_construct/file_%26_dir_management/#examples_6","title":"Examples","text":"<pre><code>file myfile.txt\n</code></pre> <p>Outputs something like <code>ASCII text</code> if it's a text file.</p>"},{"location":"linux/linux_commands/essential_construct/file_%26_dir_management/#8-rm-remove-files-and-directories","title":"8. <code>rm</code> - Remove Files and Directories","text":""},{"location":"linux/linux_commands/essential_construct/file_%26_dir_management/#syntax_7","title":"Syntax","text":"<pre><code>rm [options] [file/directory]\n</code></pre>"},{"location":"linux/linux_commands/essential_construct/file_%26_dir_management/#description_7","title":"Description","text":"<p>The <code>rm</code> command is used to delete files and directories.</p>"},{"location":"linux/linux_commands/essential_construct/file_%26_dir_management/#common-options_2","title":"Common Options","text":"Option Description <code>-r</code> Remove directories and their contents recursively <code>-f</code> Force delete files without confirmation"},{"location":"linux/linux_commands/essential_construct/file_%26_dir_management/#examples_7","title":"Examples","text":"<pre><code>rm file.txt\n</code></pre> <p>Deletes <code>file.txt</code>.</p> <pre><code>rm -rf my_folder\n</code></pre> <p>Deletes <code>my_folder</code> and all its contents recursively and forcefully.</p>"},{"location":"linux/linux_commands/essential_construct/file_%26_dir_management/#9-mv-move-or-rename-files-and-directories","title":"9. <code>mv</code> - Move or Rename Files and Directories","text":""},{"location":"linux/linux_commands/essential_construct/file_%26_dir_management/#syntax_8","title":"Syntax","text":"<pre><code>mv [source] [destination]\n</code></pre>"},{"location":"linux/linux_commands/essential_construct/file_%26_dir_management/#description_8","title":"Description","text":"<p>The <code>mv</code> command is used to move or rename files and directories.</p>"},{"location":"linux/linux_commands/essential_construct/file_%26_dir_management/#examples_8","title":"Examples","text":"<pre><code>mv oldname.txt newname.txt\n</code></pre> <p>Renames <code>oldname.txt</code> to <code>newname.txt</code>.</p> <pre><code>mv file.txt /home/user/Documents/\n</code></pre> <p>Moves <code>file.txt</code> to the <code>/home/user/Documents/</code> directory.</p>"},{"location":"linux/linux_commands/essential_construct/file_%26_dir_management/#10-cp-copy-files-and-directories","title":"10. <code>cp</code> - Copy Files and Directories","text":""},{"location":"linux/linux_commands/essential_construct/file_%26_dir_management/#syntax_9","title":"Syntax","text":"<pre><code>cp [options] [source] [destination]\n</code></pre>"},{"location":"linux/linux_commands/essential_construct/file_%26_dir_management/#description_9","title":"Description","text":"<p>The <code>cp</code> command is used to copy files and directories.</p>"},{"location":"linux/linux_commands/essential_construct/file_%26_dir_management/#examples_9","title":"Examples","text":"<pre><code>cp file.txt backup.txt\n</code></pre> <p>Copies <code>file.txt</code> to <code>backup.txt</code>.</p> <pre><code>cat abc.txt &gt;&gt; pqr.txt\n</code></pre> <p>Copies <code>abc.txt</code> to <code>pqr.txt</code> without replacing the content inside <code>pqr.txt</code>.</p> <pre><code>cp -r my_folder/ backup_folder/\n</code></pre> <p>Copies <code>my_folder</code> and its contents to <code>backup_folder</code>.</p>"},{"location":"linux/linux_commands/essential_construct/file_%26_dir_management/#related-commands","title":"Related Commands","text":"<ul> <li><code>tree</code> \u2013 Display directory structure in a tree format</li> <li><code>find</code> \u2013 Search for files and directories</li> </ul>"},{"location":"linux/linux_commands/essential_construct/file_manipulation/","title":"File Manipulation Commands","text":""},{"location":"linux/linux_commands/essential_construct/file_manipulation/#1-cat-concatenate-and-display-files","title":"1. <code>cat</code> - Concatenate and Display Files","text":""},{"location":"linux/linux_commands/essential_construct/file_manipulation/#syntax","title":"Syntax","text":"<pre><code>cat [options] [file]\n</code></pre>"},{"location":"linux/linux_commands/essential_construct/file_manipulation/#description","title":"Description","text":"<p>The <code>cat</code> command is used to view, create, and concatenate files.</p>"},{"location":"linux/linux_commands/essential_construct/file_manipulation/#examples","title":"Examples","text":"<pre><code>cat file.txt\n</code></pre> <p>Displays the content of <code>file.txt</code>.</p> <pre><code>cat file1.txt file2.txt\n</code></pre> <p>Displays the content of both <code>file1.txt</code> and <code>file2.txt</code> sequentially.</p> <pre><code>cat &gt; newfile.txt\nHello, world!\nCTRL + D\n</code></pre> <p>Creates <code>newfile.txt</code> and writes text into it. Press <code>CTRL + D</code> to save and exit.</p> <pre><code>cat &gt;&gt; existingfile.txt\nNew content here.\nCTRL + D\n</code></pre> <p>Adds new content at the end of <code>existingfile.txt</code> without deleting the existing data.</p> <pre><code>cat file1.txt &gt; file2.txt\n</code></pre> <p>Copies <code>file1.txt</code> content into <code>file2.txt</code>, overwriting it.</p> <pre><code>cat file1.txt &gt;&gt; file2.txt\n</code></pre> <p>Appends <code>file1.txt</code> content to <code>file2.txt</code> without overwriting.</p>"},{"location":"linux/linux_commands/essential_construct/file_manipulation/#2-sort-sort-lines-in-a-file","title":"2. <code>sort</code> - Sort Lines in a File","text":""},{"location":"linux/linux_commands/essential_construct/file_manipulation/#syntax_1","title":"Syntax","text":"<pre><code>sort [options] [file]\n</code></pre>"},{"location":"linux/linux_commands/essential_construct/file_manipulation/#description_1","title":"Description","text":"<p>The <code>sort</code> command sorts lines in a file in ascending or descending order.</p>"},{"location":"linux/linux_commands/essential_construct/file_manipulation/#common-options","title":"Common Options","text":"Option Description <code>-r</code> Sort in reverse order <code>-n</code> Sort numerically <code>-u</code> Remove duplicate lines <code>-k</code> Sort based on a specific column"},{"location":"linux/linux_commands/essential_construct/file_manipulation/#examples_1","title":"Examples","text":"<pre><code>sort file.txt\n</code></pre> <p>Sorts the lines in <code>file.txt</code> in ascending order.</p> <pre><code>sort -r file.txt\n</code></pre> <p>Sorts the lines in <code>file.txt</code> in descending order.</p> <pre><code>sort -n numbers.txt\n</code></pre> <p>Sorts the numbers in <code>numbers.txt</code> in numerical order.</p> <pre><code>sort -u file.txt\n</code></pre> <p>Sorts and removes duplicate lines from <code>file.txt</code>.</p> <pre><code>sort -k2 file.txt\n</code></pre> <p>Sorts <code>file.txt</code> based on the second column.</p>"},{"location":"linux/linux_commands/essential_construct/file_manipulation/#3-nano-text-editor","title":"3. <code>nano</code> - Text Editor","text":""},{"location":"linux/linux_commands/essential_construct/file_manipulation/#syntax_2","title":"Syntax","text":"<pre><code>nano [filename]\n</code></pre>"},{"location":"linux/linux_commands/essential_construct/file_manipulation/#description_2","title":"Description","text":"<p>The <code>nano</code> is a simple, user-friendly text editor used for modifying text files.</p>"},{"location":"linux/linux_commands/essential_construct/file_manipulation/#basic-controls","title":"Basic Controls","text":"Shortcut Function <code>CTRL + O</code> Save file <code>CTRL + X</code> Exit editor <code>CTRL + K</code> Cut a line <code>CTRL + U</code> Paste a line"},{"location":"linux/linux_commands/essential_construct/file_manipulation/#examples_2","title":"Examples","text":"<pre><code>nano myfile.txt\n</code></pre> <p>Opens <code>myfile.txt</code> with <code>nano</code> for editing.</p>"},{"location":"linux/linux_commands/essential_construct/file_manipulation/#related-commands","title":"Related Commands","text":"<ul> <li><code>vim</code> \u2013 A more advanced text editor</li> <li><code>echo</code> \u2013 Prints text to the terminal or file</li> <li><code>less</code> \u2013 View file content one page at a time</li> <li><code>head</code> \u2013 Display the first few lines of a file</li> <li><code>tail</code> \u2013 Show the last few lines of a file</li> </ul>"},{"location":"linux/linux_commands/essential_construct/file_permissions/","title":"File Permissions Commands","text":""},{"location":"linux/linux_commands/essential_construct/file_permissions/#1-chmod-command","title":"1. <code>chmod</code> Command","text":""},{"location":"linux/linux_commands/essential_construct/file_permissions/#description","title":"Description","text":"<p>The <code>chmod</code> command is used to change file and directory permissions in Linux. It allows users to modify read, write, and execute permissions for the owner, group, and others.</p>"},{"location":"linux/linux_commands/essential_construct/file_permissions/#syntax","title":"Syntax","text":"<p><pre><code>chmod [options] mode file\n</code></pre> - <code>mode</code> \u2013 Specifies the permission change (symbolic or numeric). - <code>file</code> \u2013 The file or directory to modify.</p>"},{"location":"linux/linux_commands/essential_construct/file_permissions/#permission-types","title":"Permission Types","text":"Permission Symbol Numeric Value Read <code>r</code> <code>4</code> Write <code>w</code> <code>2</code> Execute <code>x</code> <code>1</code>"},{"location":"linux/linux_commands/essential_construct/file_permissions/#modes-of-using-chmod","title":"Modes of Using <code>chmod</code>","text":""},{"location":"linux/linux_commands/essential_construct/file_permissions/#1-numeric-mode","title":"1\ufe0f. Numeric Mode","text":"<p>Permissions are set using a three-digit octal number: <pre><code>chmod 755 file.txt\n</code></pre></p> <p>Sets <code>rwxr-xr-x</code> (Owner: read, write, execute; Group: read, execute; Others: read, execute).</p>"},{"location":"linux/linux_commands/essential_construct/file_permissions/#2-symbolic-mode","title":"2\ufe0f. Symbolic Mode","text":"<p>Modify permissions using <code>+</code>, <code>-</code>, or <code>=</code> operators: <pre><code>chmod u+x file.sh\n</code></pre></p> <p>Adds execute (<code>x</code>) permission for the owner (<code>u</code>).</p> <pre><code>chmod g-w file.txt\n</code></pre> <p>Removes write (<code>w</code>) permission for the group (<code>g</code>).</p> <pre><code>chmod o=r file.txt\n</code></pre> <p>Sets read (<code>r</code>) permission only for others (<code>o</code>).</p>"},{"location":"linux/linux_commands/essential_construct/file_permissions/#special-permissions","title":"Special Permissions","text":"Special Bit Symbol Description Set UID <code>u+s</code> Execute as the file owner Set GID <code>g+s</code> Execute as the group owner Sticky Bit <code>o+t</code> Restricts deletion in shared directories"},{"location":"linux/linux_commands/essential_construct/file_permissions/#3-applying-special-permissions","title":"3\ufe0f. Applying Special Permissions","text":"<pre><code>chmod u+s script.sh\n</code></pre> <p>Sets Set UID (runs as file owner).</p> <pre><code>chmod g+s shared_folder\n</code></pre> <p>Sets Set GID (files inherit group ownership).</p> <pre><code>chmod o+t /tmp\n</code></pre> <p>Enables the sticky bit (only owners can delete their files).</p>"},{"location":"linux/linux_commands/essential_construct/file_permissions/#examples","title":"Examples","text":""},{"location":"linux/linux_commands/essential_construct/file_permissions/#4-grant-full-permissions-to-owner-readexecute-to-others","title":"4\ufe0f. Grant Full Permissions to Owner, Read/Execute to Others","text":"<pre><code>chmod 750 script.sh\n</code></pre>"},{"location":"linux/linux_commands/essential_construct/file_permissions/#5-give-everyone-full-permissions","title":"5. Give Everyone Full Permissions","text":"<pre><code>chmod 777 public_file\n</code></pre> <p>\ud83d\udca1 Tip: Use <code>chmod -R</code> to change permissions recursively! <pre><code>chmod -R 755 my_folder\n</code></pre></p> <p>Sets <code>755</code> permissions for all files and directories inside <code>my_folder</code>.</p>"},{"location":"linux/linux_commands/essential_construct/file_permissions/#2-group-command","title":"2. <code>group</code> Command","text":""},{"location":"linux/linux_commands/essential_construct/file_permissions/#description_1","title":"Description","text":"<p>The <code>group</code> command in Linux is used to manage user groups. Groups help organize users and manage permissions more efficiently. While there is no direct <code>group</code> command, several commands exist to create, modify, and manage groups.</p>"},{"location":"linux/linux_commands/essential_construct/file_permissions/#group-management-commands","title":"Group Management Commands","text":"<pre><code>groupadd group_name\n</code></pre> <p>Creates a new group named <code>group_name</code>.</p> <pre><code>groupdel group_name\n</code></pre> <p>Removes the group <code>group_name</code>.</p> <pre><code>groupmod -n new_group_name old_group_name\n</code></pre> <p>Renames <code>old_group_name</code> to <code>new_group_name</code>.</p> <pre><code>usermod -aG group_name user_name\n</code></pre> <p>Adds <code>user_name</code> to <code>group_name</code> without removing them from other groups.</p> <pre><code>gpasswd -d user_name group_name\n</code></pre> <p>Removes <code>user_name</code> from <code>group_name</code>.</p> <pre><code>groupmems -l -g group_name\n</code></pre> <p>Lists all users in <code>group_name</code>.</p> <pre><code>groups user_name\n</code></pre> <p>Displays all groups that <code>user_name</code> is a member of.</p> <pre><code>cat /etc/group\n</code></pre> <p>Displays the list of all groups and their members.</p> <p>\ud83d\udca1 Tip: Use <code>sudo</code> before these commands for administrative tasks! <pre><code>sudo groupadd developers\n</code></pre></p> <p>Creates a <code>developers</code> group with administrative privileges.</p>"},{"location":"linux/linux_commands/essential_construct/file_permissions/#3-chowncommand","title":"3. <code>chown</code>Command","text":""},{"location":"linux/linux_commands/essential_construct/file_permissions/#description_2","title":"Description","text":"<p>The <code>chown</code> command in Linux is used to change the ownership of files and directories. It allows administrators or users with the necessary permissions to modify the owner and group associated with a file.</p>"},{"location":"linux/linux_commands/essential_construct/file_permissions/#syntax_1","title":"Syntax","text":"<p><pre><code>chown [OPTIONS] [OWNER][:GROUP] FILE\n</code></pre> - <code>OWNER</code> \u2013 New owner of the file. - <code>GROUP</code> \u2013 New group of the file (optional, prefixed with <code>:</code>). - <code>FILE</code> \u2013 Target file or directory.</p>"},{"location":"linux/linux_commands/essential_construct/file_permissions/#common-options","title":"Common Options","text":"Option Description <code>-R</code> Recursively change ownership of directories and files inside them <code>-c</code> Show output only for changed files <code>-v</code> Display details of the ownership change <code>--reference=FILE</code> Use the owner of another file as a reference"},{"location":"linux/linux_commands/essential_construct/file_permissions/#examples_1","title":"Examples","text":"<pre><code>chown user1 file.txt\n</code></pre> <p>Changes the owner of <code>file.txt</code> to <code>user1</code>.</p> <pre><code>chown user1:group1 file.txt\n</code></pre> <p>Changes the owner to <code>user1</code> and group to <code>group1</code>.</p> <pre><code>chown :group1 file.txt\n</code></pre> <p>Assigns <code>group1</code> as the group owner of <code>file.txt</code>.</p> <pre><code>chown -R user1:group1 /home/user1\n</code></pre> <p>Changes ownership of <code>/home/user1</code> and all files inside it.</p> <pre><code>chown --reference=existing_file new_file\n</code></pre> <p>Assigns <code>new_file</code> the same ownership as <code>existing_file</code>.</p>"},{"location":"linux/linux_commands/essential_construct/file_permissions/#related-commands","title":"Related Commands","text":"<ul> <li><code>ls -l</code> \u2013 View file permissions.</li> <li><code>umask</code> \u2013 Set default permissions for new files.</li> </ul> <p>\ud83d\udca1 Tip: Use <code>sudo</code> before <code>chown</code> if you need administrative privileges! <pre><code>sudo chown user1:group1 file.txt\n</code></pre></p> <p>Runs the command with root privileges to avoid permission errors.</p>"},{"location":"linux/linux_commands/essential_construct/file_viewing/","title":"File Viewing Commands","text":""},{"location":"linux/linux_commands/essential_construct/file_viewing/#1-head-display-first-few-lines-of-a-file","title":"1. <code>head</code> - Display First Few Lines of a File","text":""},{"location":"linux/linux_commands/essential_construct/file_viewing/#syntax","title":"Syntax","text":"<pre><code>head [options] [file]\n</code></pre>"},{"location":"linux/linux_commands/essential_construct/file_viewing/#description","title":"Description","text":"<p>The <code>head</code> command displays the first 10 lines of a file by default.</p>"},{"location":"linux/linux_commands/essential_construct/file_viewing/#examples","title":"Examples","text":"<pre><code>head file.txt\n</code></pre> <p>Displays the first 10 lines of <code>file.txt</code>.</p> <pre><code>head -n 5 file.txt\n</code></pre> <p>Displays the first 5 lines of <code>file.txt</code>.</p>"},{"location":"linux/linux_commands/essential_construct/file_viewing/#2-tail-display-last-few-lines-of-a-file","title":"2. <code>tail</code> - Display Last Few Lines of a File","text":""},{"location":"linux/linux_commands/essential_construct/file_viewing/#syntax_1","title":"Syntax","text":"<pre><code>tail [options] [file]\n</code></pre>"},{"location":"linux/linux_commands/essential_construct/file_viewing/#description_1","title":"Description","text":"<p>The <code>tail</code> command displays the last 10 lines of a file by default.</p>"},{"location":"linux/linux_commands/essential_construct/file_viewing/#examples_1","title":"Examples","text":"<pre><code>tail file.txt\n</code></pre> <p>Displays the last 10 lines of <code>file.txt</code>.</p> <pre><code>tail -n 5 file.txt\n</code></pre> <p>Displays the last 5 lines of <code>file.txt</code>.</p>"},{"location":"linux/linux_commands/essential_construct/file_viewing/#3-less-view-large-files-with-scrolling","title":"3. <code>less</code> - View Large Files with Scrolling","text":""},{"location":"linux/linux_commands/essential_construct/file_viewing/#syntax_2","title":"Syntax","text":"<pre><code>less [file]\n</code></pre>"},{"location":"linux/linux_commands/essential_construct/file_viewing/#description_2","title":"Description","text":"<p>The <code>less</code> command allows viewing large files page by page.</p>"},{"location":"linux/linux_commands/essential_construct/file_viewing/#examples_2","title":"Examples","text":"<pre><code>less file.txt\n</code></pre> <p>Opens <code>file.txt</code> for viewing with scrolling.</p> <pre><code>less +G file.txt\n</code></pre> <p>Opens <code>file.txt</code> at the end (like <code>tail</code>).</p>"},{"location":"linux/linux_commands/essential_construct/file_viewing/#4-more-view-file-content-page-by-page","title":"4. <code>more</code> - View File Content Page by Page","text":""},{"location":"linux/linux_commands/essential_construct/file_viewing/#syntax_3","title":"Syntax","text":"<pre><code>more [file]\n</code></pre>"},{"location":"linux/linux_commands/essential_construct/file_viewing/#description_3","title":"Description","text":"<p>The <code>more</code> command is used to view file content one page at a time.</p>"},{"location":"linux/linux_commands/essential_construct/file_viewing/#examples_3","title":"Examples","text":"<pre><code>more file.txt\n</code></pre> <p>Displays <code>file.txt</code> page by page.</p>"},{"location":"linux/linux_commands/essential_construct/file_viewing/#6-nl-number-lines-in-a-file","title":"6. <code>nl</code> - Number Lines in a File","text":""},{"location":"linux/linux_commands/essential_construct/file_viewing/#syntax_4","title":"Syntax","text":"<pre><code>nl [file]\n</code></pre>"},{"location":"linux/linux_commands/essential_construct/file_viewing/#description_4","title":"Description","text":"<p>The <code>nl</code> command displays a file with numbered lines.</p>"},{"location":"linux/linux_commands/essential_construct/file_viewing/#examples_4","title":"Examples","text":"<pre><code>nl file.txt\n</code></pre> <p>Displays <code>file.txt</code> with line numbers.</p>"},{"location":"linux/linux_commands/essential_construct/file_viewing/#related-commands","title":"Related Commands","text":"<ul> <li><code>find</code> \u2013 Search for files and directories</li> <li><code>locate</code> \u2013 Find files by name</li> <li><code>tac</code> \u2013 Display file content in reverse order</li> <li><code>wc</code> \u2013 Count words, lines, and characters in a file</li> </ul>"},{"location":"linux/linux_commands/essential_construct/searching_%26_filtering/","title":"Searching and filtering Commands","text":""},{"location":"linux/linux_commands/essential_construct/searching_%26_filtering/#1-grep-command-in-linux","title":"1. <code>grep</code> Command in Linux","text":""},{"location":"linux/linux_commands/essential_construct/searching_%26_filtering/#description","title":"Description","text":"<p>The <code>grep</code> command is used to search for patterns within files or output. It scans each line and prints matching results, making it useful for filtering text data.</p>"},{"location":"linux/linux_commands/essential_construct/searching_%26_filtering/#syntax","title":"Syntax","text":"<p><pre><code>grep [options] pattern [file]\n</code></pre> - <code>pattern</code> \u2013 The text or regular expression to search for. - <code>file</code> \u2013 The file where the search is performed (optional).</p>"},{"location":"linux/linux_commands/essential_construct/searching_%26_filtering/#common-options","title":"Common Options","text":"Option Description <code>-i</code> Ignore case sensitivity <code>-r</code> Recursively search directories <code>-n</code> Show line numbers with matching lines <code>-c</code> Count the number of matching lines"},{"location":"linux/linux_commands/essential_construct/searching_%26_filtering/#examples","title":"Examples","text":"<pre><code>grep \"error\" logfile.txt\n</code></pre> <p>Searches for the word \"error\" in <code>logfile.txt</code> and displays matching lines.</p> <pre><code>grep -i \"warning\" logfile.txt\n</code></pre> <p>Searches for \"warning\" in <code>logfile.txt</code>, ignoring case differences.</p> <pre><code>grep -v \"success\" logfile.txt\n</code></pre> <p>Shows all lines that do not contain \"success\".</p> <pre><code>grep \"hello\" *.txt\n</code></pre> <p>Searches for \"hello\" in all <code>.txt</code> files in the directory.</p> <pre><code>grep -c \"error\" logfile.txt\n</code></pre> <p>Counts the number of lines containing \"error\" in <code>logfile.txt</code>.</p> <pre><code>grep -r \"TODO\" /home/user/projects\n</code></pre> <p>Searches for \"TODO\" in all files within <code>/home/user/projects</code>.</p>"},{"location":"linux/linux_commands/essential_construct/searching_%26_filtering/#2-find-command-in-linux","title":"2. <code>find</code> Command in Linux","text":""},{"location":"linux/linux_commands/essential_construct/searching_%26_filtering/#description_1","title":"Description","text":"<p>The <code>find</code> command is used to search for files and directories in a directory hierarchy based on various criteria such as name, size, type, and permissions.</p>"},{"location":"linux/linux_commands/essential_construct/searching_%26_filtering/#syntax_1","title":"Syntax","text":"<p><pre><code>find [path] [expression] [actions]\n</code></pre> - <code>path</code> \u2013 The directory where the search begins. - <code>expression</code> \u2013 Search criteria (e.g., name, type, size). - <code>actions</code> \u2013 What to do with matching files (e.g., delete, print).</p>"},{"location":"linux/linux_commands/essential_construct/searching_%26_filtering/#common-options_1","title":"Common Options","text":"Option Description <code>-name</code> Search by file name (case-sensitive) <code>-iname</code> Search by file name (case-insensitive) <code>-type</code> Search by file type (<code>f</code> for file, <code>d</code> for directory) <code>-size</code> Search by file size (e.g., <code>+100M</code> for files larger than 100MB) <code>-exec</code> Execute a command on found files <code>-delete</code> Delete matching files"},{"location":"linux/linux_commands/essential_construct/searching_%26_filtering/#examples_1","title":"Examples","text":"<pre><code>find /home/user -name \"document.txt\"\n</code></pre> <p>Searches for <code>document.txt</code> inside <code>/home/user</code> and its subdirectories.</p> <pre><code>find /home/user -iname \"document.txt\"\n</code></pre> <p>Searches for <code>document.txt</code> without case sensitivity.</p> <pre><code>find /home/user -type d\n</code></pre> <p>Lists all directories inside <code>/home/user</code>.</p> <pre><code>find /var/log -size +100M\n</code></pre> <p>Finds all files in <code>/var/log</code> larger than 100MB.</p> <pre><code>find /home/user -name \"*.log\" -exec rm {} \\;\n</code></pre> <p>Finds and deletes all <code>.log</code> files inside <code>/home/user</code>.</p> <pre><code>find /home/user -type f -empty -delete\n</code></pre> <p>Deletes all empty files inside <code>/home/user</code>.</p> <p>\ud83d\udca1 Tip: Use <code>find</code> with <code>grep</code> to refine searches! <pre><code>find /etc -type f | grep \"config\"\n</code></pre></p> <p>Finds files containing \"config\" in their path.</p>"}]}